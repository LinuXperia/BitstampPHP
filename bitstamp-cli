#!/usr/bin/php
<?php
require __DIR__ . '/vendor/autoload.php';
require __DIR__.'/lib/class.APIException.php';
require __DIR__.'/lib/class.BitstampNet.php';
require __DIR__.'/lib/debug.php';
require __DIR__.'/lib/bitstamp-cli-utilities.php';

use Garden\Cli\Cli;

// Load local config file
$localConfig = array();
if (file_exists(__DIR__.'/config-local.php')) {
    require __DIR__.'/config-local.php';
}

// Init BitstampNet class with local config
$bitstamp = new Mx17\BitstampPHP\BitstampNet($localConfig);

$currencyOptionDescription = 'Set currency pair. Supported values: '.
    implode(', ', $bitstamp->getAllowedCurrencyPairs());
$noPromptOptionsDecription = 'no prompt';
$cli = Cli::create()
    ->command('ticker')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('tickerHour')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('orderBook')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('transactions')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('conversionRate')
        ->description('EUR/USD conversion rate')
    ->command('balance')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('openOrders')
    ->command('userTransactions')
        ->opt('currency', $currencyOptionDescription, false)
        ->opt('offset:o', 'Offset', false, 'string')
        ->opt('limit:l', 'Limit', false, 'string')
        ->opt('sort:s', 'Sort', false, 'string')
    ->command('openOrders')
        ->opt('currency', $currencyOptionDescription, false)
    ->command('cancelAllOrders')
        ->opt('no-prompt:n', $noPromptOptionsDecription, false, 'boolean')
    ->command('buy')
        ->opt('currency', $currencyOptionDescription, false)
        ->opt('no-prompt:n', $noPromptOptionsDecription, false, 'boolean')
        ->opt('amount:a', 'Amount. You can specify "all" to invest all your available budget', true, 'string')
        ->opt('price:p', 'Price', true, 'string')
        ->opt(
            'limit-price:l',
            'If the order gets executed, a new sell order will be placed, with "limit-price" as its price.',
            false,
            'string'
        )
        ->opt(
            'daily-order:d',
            'Opens buy limit order which will be canceled at 00:00 UTC unless it already has been executed.',
            false,
            'boolean'
        )
    ->command('sell')
        ->opt('currency', $currencyOptionDescription, false)
        ->opt('no-prompt:n', $noPromptOptionsDecription, false, 'boolean')
        ->opt('amount:a', 'Amount', true, 'string')
        ->opt('price:p', 'Price', true, 'string')
        ->opt(
            'limit-price:l',
            'If the order gets executed, a new buy order will be placed, with "limit-price" as its price.',
            false,
            'string'
        )
        ->opt(
            'daily-order:d',
            'Opens sell limit order which will be canceled at 00:00 UTC unless it already has been executed.',
            false,
            'boolean'
        )
    ->command('orderStatus')
        ->arg('orderId', 'The order id.', true)
    ->command('cancelOrder')
        ->opt('no-prompt:n', $noPromptOptionsDecription, false, 'boolean')
        ->arg('orderId', 'The order id.', true);

$args = $cli->parse($argv, true);
$currency = $args->getOpt('currency', $bitstamp->getCurrency());
$bitstamp->setCurrency($currency);
$noPrompt = $args->getOpt('no-prompt', false);

try {
    switch ($command = $args->getCommand()) {
        case 'ticker':
            $data = $bitstamp->ticker();
            printTable(array($data));
            break;
        case 'tickerHour':
            $data = $bitstamp->tickerHour();
            printTable(array($data));
            break;
        case 'orderBook':
            $data = $bitstamp->orderBook();
            echo print_r($data, 1)."\n";
            break;
        case 'transactions':
            $data = $bitstamp->transactions();
            printTable($data);
            break;
        case 'conversionRate':
            $data = $bitstamp->conversionRate();
            printTable(array($data));
            break;
        case 'balance':
            $data = $bitstamp->balance();
            printTable(array($data));
            break;
        case 'openOrders':
            $data = $bitstamp->openOrders();
            printTable($data);
            break;
        case 'userTransactions':
            $offset = $args->getOpt('offset', 0);
            $limit = $args->getOpt('limit', 10);
            $sort = $args->getOpt('sort', 'desc');
            $data = $bitstamp->userTransactions($offset, $limit, $sort);
            printTable($data);
            break;
        case 'openOrders':
            $data = $bitstamp->openOrders();
            printTable($data);
            break;
        case 'cancelAllOrders':
            if ($noPrompt || askConfirmation()) {
                $data = $bitstamp->cancelAllOrders();
                echo print_r($data, 1)."\n";
            }
            break;
        case 'buy':
            $amount = $args->getOpt('amount');
            $price = $args->getOpt('price');
            $limitPrice = $args->getOpt('limit-price');
            $dailyOrder = $args->getOpt('daily-order');
            if ($amount === 'all') {
                $buyableBTC = howManyBTCCanIBuyWithAllMyBalance($bitstamp, $price);
                $amount = $buyableBTC;
            }
            $prompt = "Buy $amount BTC for $price {$bitstamp->getCurrency()}";
            if ($noPrompt || askConfirmation($prompt)) {
                $data = $bitstamp->buy($amount, $price, $limitPrice, $dailyOrder);
                printTable(array($data));
            }
            break;
        case 'sell':
            $amount = $args->getOpt('amount');
            $price = $args->getOpt('price');
            $limitPrice = $args->getOpt('limit-price');
            $dailyOrder = $args->getOpt('daily-order');
            $prompt = "Sell $amount BTC for $price {$bitstamp->getCurrency()}";
            if ($noPrompt || askConfirmation($prompt)) {
                $data = $bitstamp->sell($amount, $price, $limitPrice, $dailyOrder);
                printTable(array($data));
            }
            break;
        case 'orderStatus':
            $orderId = $args->getArg('orderId');
            $data = $bitstamp->orderStatus($orderId);
            echo print_r($data, 1)."\n";
            break;
        case 'cancelOrder':
            if ($noPrompt || askConfirmation()) {
                $orderId = $args->getArg('orderId');
                $data = $bitstamp->cancelOrder($orderId);
                printTable(array($data));
            }
            break;
        default:
            echon(basename(__FILE__).": unrecognized argument \"$command\"");
            exit(1);
            break;
    }
} catch (Mx17\BitstampPHP\APIErrorException $e) {
    echon(basename(__FILE__).": ".$e->getMessage());
    exit(33);
}

// vim: syntax=php
